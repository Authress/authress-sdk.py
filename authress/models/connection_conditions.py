# coding: utf-8

"""
    Authress

    <p> <h2>Introduction</h2> <p>Welcome to the Authress Authorization API. <br>The Authress REST API provides the operations and resources necessary to create records, assign permissions, and verify any user in your platform.</p> <p><ul>   <li>Manage multitenant platforms and create user tenants for SSO connections.</li>   <li>Create records to assign roles and resources to grant access for users.</li>   <li>Check user access control by calling the authorization API at the right time.</li>   <li>Configure service clients to securely access services in your platform.</li> </ul></p> <p>For more in-depth scenarios check out the <a href=\"https://authress.io/knowledge-base\" target=\"_blank\">Authress knowledge base</a>.</p> </p>

    The version of the OpenAPI document: v1
    Contact: support@authress.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
try:
    from pydantic.v1 import BaseModel, Field, StrictBool
except ImportError:
    from pydantic import BaseModel, Field, StrictBool

class ConnectionConditions(BaseModel):
    """
    Conditions are custom restrictions on connections that prevent the connection from being used when it should not be, or limits its usability for increased security.  # noqa: E501
    """
    require_business_account: Optional[StrictBool] = Field(default=False, alias="requireBusinessAccount", description="Require the user logging in with this connect to be using a business account. When possible Authress will block user login and request that they select a different account. Enabling this may prevent some users from being able to sign up with this identity connection.")
    __properties = ["requireBusinessAccount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConnectionConditions:
        """Create an instance of ConnectionConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if require_business_account (nullable) is None
        # and __fields_set__ contains the field
        if self.require_business_account is None and "require_business_account" in self.__fields_set__:
            _dict['requireBusinessAccount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConnectionConditions:
        """Create an instance of ConnectionConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConnectionConditions.parse_obj(obj)

        _obj = ConnectionConditions.parse_obj({
            "require_business_account": obj.get("requireBusinessAccount") if obj.get("requireBusinessAccount") is not None else False
        })
        return _obj


