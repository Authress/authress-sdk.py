# coding: utf-8

"""
    Authress

    <p> <h2>Introduction</h2> <p>Welcome to the Authress Authorization API. <br>The Authress REST API provides the operations and resources necessary to create records, assign permissions, and verify any user in your platform.</p> <p><ul>   <li>Manage multitenant platforms and create user tenants for SSO connections.</li>   <li>Create records to assign roles and resources to grant access for users.</li>   <li>Check user access control by calling the authorization API at the right time.</li>   <li>Configure service clients to securely access services in your platform.</li> </ul></p> <p>For more in-depth scenarios check out the <a href=\"https://authress.io/knowledge-base\" target=\"_blank\">Authress knowledge base</a>.</p> </p>  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@authress.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UserIdentity(BaseModel):
    """
    The composite user identity stored in Authress sourced by the customer SSO/SAML/OAuth IdP.
    """
    user_id: StrictStr = Field(..., alias="userId", description="The user identifier.")
    name: Optional[StrictStr] = Field(None, description="The user's formatted display name.")
    picture: Optional[StrictStr] = Field(None, description="A url that resolves to a picture that can be rendered.")
    email: Optional[StrictStr] = Field(None, description="The user's verified email address sourced from their SSO IdP.")
    __properties = ["userId", "name", "picture", "email"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserIdentity:
        """Create an instance of UserIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserIdentity:
        """Create an instance of UserIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserIdentity.parse_obj(obj)

        _obj = UserIdentity.parse_obj({
            "user_id": obj.get("userId"),
            "name": obj.get("name"),
            "picture": obj.get("picture"),
            "email": obj.get("email")
        })
        return _obj


